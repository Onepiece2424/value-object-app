<div class="item-main-form">
  <%= form_with(model: @item, local: true) do |form| %>

    <% if @item.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@item.errors.count, "error") %> prevented this item from being saved:</h2>
        <ul>
          <% @item.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <table class="item-form-table">
      <tr>
        <td><%= form.label :name, "Item Name" %></td>
        <td><%= form.text_field :name %></td>
      </tr>

      <tr>
        <td><%= form.label :description, "Description" %></td>
        <td class="item-form-description"><%= form.text_area :description %></td>
      </tr>

      <tr>
        <td><%= form.label :price, "Price" %></td>
        <td><%= form.number_field :price, min: 1 %></td>
      </tr>

      <tr>
        <td><%= form.label :stock, "Stock Quantity" %></td>
        <td><%= form.number_field :stock, min: 1 %></td>
      </tr>

      <tr>
        <td>
          <div class="label-area">
            <label for="manufacture_date">Manufacture Date</label>
            <button type="button" id="add-production-date-btn">生産日を追加する</button>
          </div>
        </td>
        <td>
          <div class="production-date-area">
            <%= form.fields_for :production_dates do |pd_form| %>
              <div class="production-date-group" data-index="<%= pd_form.index %>">
                <%= pd_form.date_field :manufacture_date %>
                <%= pd_form.hidden_field :_destroy %>
                <span class="delete-form-btn">削除する</span>
              </div>
            <% end %>
          </div>
        </td>
      </tr>

      <tr>
        <td colspan="2"><%= form.submit "Create Item" %></td>
      </tr>
    </table>

  <% end %>

  <script>
    // ページのDOMが完全に読み込まれたら処理を開始する
    document.addEventListener('DOMContentLoaded', () => {
        // 製造日入力フォームを表示するエリアを取得
        const productionDateArea = document.querySelector('.production-date-area');
        // 製造日追加ボタンを取得
        const addProductionDateBtn = document.getElementById('add-production-date-btn');

        // 製造日追加ボタンがクリックされたときの処理
        addProductionDateBtn.addEventListener('click', () => {
            // 既存のフォーム数を基に、新しいフォームのインデックスを決定
            const newIndex = productionDateArea.children.length;

            // 新しい製造日入力フォームを作成
            const newGroup = document.createElement('div');
            newGroup.className = 'production-date-group';  // フォームにクラスを追加
            newGroup.dataset.index = newIndex;  // 新しいインデックスをdata属性に設定

            // フォームの内容をHTMLとして追加（製造日入力フィールドと削除用ボタン）
            newGroup.innerHTML = `
                <input type="date" name="item[production_dates_attributes][${newIndex}][manufacture_date]" id="item_production_dates_attributes_${newIndex}_manufacture_date">
                <input type="hidden" name="item[production_dates_attributes][${newIndex}][_destroy]" id="item_production_dates_attributes_${newIndex}__destroy">
                <span class="delete-form-btn">削除する</span>
            `;

            // 新しいフォームをエリアに追加
            productionDateArea.appendChild(newGroup);
        });

        // 製造日エリア内で「削除する」ボタンがクリックされたときの処理
        productionDateArea.addEventListener('click', (e) => {
            // クリックされた要素が「削除する」ボタンである場合
            if (e.target.classList.contains('delete-form-btn')) {
                // 削除ボタンに対応する製造日入力フォーム全体を取得
                const group = e.target.closest('.production-date-group');

                // 削除フラグ（_destroy）をセット（サーバー側で削除されるように）
                group.querySelector('input[type="hidden"]').value = '1';

                // フォームを非表示にして見た目上削除する（実際にはサーバー側で削除）
                group.style.display = 'none';
            }
        });
    });
  </script>
</div>
